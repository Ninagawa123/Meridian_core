
Meridian_core フローチャート 2022.05.01

① メインループ概要：ESP32メインループ, ESP32マルチスレッド ,Teensy4.0メインループ
② 各種設定資料：ESP32設定, Teensy4.0設定
③ Meridian_map.pngの図解も合わせてご覧ください


====================================================================================================================
    ① メ イ ン ル ー プ 概 要 
====================================================================================================================
------------------------------------------------------------------------------------------------------
---- ESP32メインループ / ESP32 flow chart---------------------------------------------------------------
------------------------------------------------------------------------------------------------------

[ 1 ] UDP受信
	[1-1] UDP受信の実行
	--->> [check!] UDP受信は別スレッド void Core0_UDP_r() で実行されている.
	[1-2] UDP受信配列からSPI送信配列にデータを転写.
		[1-2-1] UDP受信データ r_udp_meridim のチェックサムを確認.
			[1-2-1-a] 受信成功ならUDP受信データをSPI送信データに上書き更新する.
			[1-2-1-b] 受信失敗ならUDP受信データをSPI送信データに上書き更新せず, 前回のSPI送信データにエラーフラグだけ上乗せする.
		--->> [check!] ここで s_spi_meridim にはチェックサム済みの r_udp_meridim が転記され, ESP32UDP受信エラーフラグも入った状態.

[ 2 ] SPI送信信号作成
	[2-1] Teensyへ送るユーザー定義の送信データの書き込み
		--->> [check!] 現在はここでとくに何もしない.
	[2-2] リモコンデータの書き込み
		--->> [check!] ここでSPI送信データ s_spi_meridim はESP32で受けたリモコンデータが上書きされた状態.

	[2-3] チェックサムの追記
		--->> [check!] ここでSPI送信データ s_spi_meridim はチェックサムが入り完成している状態.

[ 3 ] SPI送受信
	[3-1] 完成したSPI送信データをDMAに転記 (※SPI送受信用のデータはここでしか処理できない)
	[3-2] SPI送受信の実行

[ 4 ] UDP送信信号作成
	[4-1] 受信したSPI送信データをUDP送信データに転記.
		--->> [check!] UDP送信データ"s_udp_meridim"に中身が入った状態.

[ 5 ] UDP送信
	[5-1] UDP送信を実行

------------------------------------------------------------------------------------------------------
---- ESP32 UDP受信用スレッド----------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
void Core0_UDP_r(void *args)
	■ 受信用の関数 void receiveUDP()

------------------------------------------------------------------------------------------------------
---- ESP32 UDP送信用スレッド ---------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
void Core0_UDP_s(void *args)
	■ 送信用の関数 void sendUDP()

------------------------------------------------------------------------------------------------------
---- ESP32 Bluetooth用スレッド -------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
void Core0_BT_r(void *args)
	■ PS4コントローラ受信用関数 void PS4pad_receive() 
	■ Wiiコントローラ 受信用関数 void Wiipad_receive_h()


====================================================================================================================

------------------------------------------------------------------------------------------------------
---- Teensy4.0メインループ  / Teensy 4.0 flow chart ----------------------------------------------------
------------------------------------------------------------------------------------------------------

[ 1 ] ESP32とのSPIによる送受信処理
	[1-1] ESP32とのSPI送受信の実行
	[1-2] ESP32からのSPI受信データチェックサム確認と成否のシリアル表示
	[1-3] 通信エラー処理(スキップ検出)
	[1-4] 通信エラー処理(エラーカウンタへの反映)

[ 2 ] シリアルモニタリング表示処理 2 
	[2-1] 受信データの表示（SPI受信データShort型）
	[2-2] 受信エラー率の表示
	[2-3] 全経路のエラー数/率の表示

[ 3 ] 積み残し処理  
	・積み残し作業があればSPI送信前のここで処理

[ 4 ] 受信SPIデータを送信SPIデータに転記

[ 5 ] センサー類読み取り
	[2-1] IMUの値を取得

[ 6 ] コントローラの読み取り
	[6-1] コントローラの値を取得

[ 7 ] Teensy内部で位置制御する場合の処理
	[7-1] マスターコマンドの判定によりこの工程の実行orスキップを分岐(デフォルトはMeridim配列数である90)
		コマンド[90]: サーボオン 通常動作
		コマンド[0]: 全サーボ脱力
		コマンド[1]: サーボオン 通常動作
		コマンド[2]: IMUのヨー軸設定
		コマンド[3]: トリムモードがオンもしくはコマンド3の時はループ
	[7-2] 前回のラストに読み込んだサーボ位置をサーボ配列に書き込む
	[7-3] Teensyによる次回動作の計算
	[7-4] センサーデータによる動作へのフィードバック加味
	[7-5] 移動時間の決定
	[7-6] Teensy内計算による次回動作をMeridim配列に書き込む

[ 8 ] サーボコマンドの書き込み
	[8-1] Meridim配列をサーボ命令に変更
	[8-2] サーボコマンドの配列に書き込み
	[8-3] サーボデータのICS送信および返り値を取得

[ 9 ] SPI送信用のMeridim配列を作成する
	[9-1] マスターコマンドを配列に格納
	[9-2] 移動時間を配列に格納
	[9-3] センサー値を配列に格納
	[9-4] サーボIDごとにの現在位置もしくは計算結果を配列に格納
	[9-5] フレームスキップ検出用のカウントを格納
	[9-6] カスタムデータを配列格納
	[9-7] チェックサムを計算
	[9-8] 送信データのSPIバッファへのバイト型書き込み

[ 10 ]シリアルモニタリング表示処理 1
	[10-1] シリアルモニタ表示（SPI送信データShort型）
	[10-2] シリアルモニタ表示（SPI送信データChar型）

[ 11 ] フレーム終端処理
	[11-1] この時点で１フレーム内に処理が収まっていない時の処理
	[11-2] この時点で時間が余っていたら時間消化。時間がオーバーしていたらこの処理を自然と飛ばす。
	[11-3]フレーム管理時計mercのカウントアップ
  


====================================================================================================================
    ② 各 種 設 定 資 料
====================================================================================================================

------------------------------------------------------------------------------------------------------
---- ESP32の設定関連 -----------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

 [SETTING] 各種設定 (ES-1) 
	(ES-1-1) 変更頻度高め
	(ES-1-2) シリアルモニタリング切り替え
	(ES-1-3) マウント有無とピンアサイン
	(ES-1-4) 各種初期設定
	(ES-1-5) その他固定値

 [LIBRARY] ライブラリ関連 (ES-2-LIB)
	(ES-2-1) ライブラリ全般
	(ES-2-2) PS4用を新規接続するためのペアリング情報解除設定

 [VARIABLE] 変数関連 (ES-3-VAL) 
	(ES-3-1) 変数一般
	(ES-3-2) フラグ関連
	(ES-3-3) 共用体の設定. 共用体はたとえばデータをショートで格納し,バイト型として取り出せる
	(ES-3-4) コントローラー用変数

 (ES-4) 起動時設定 
	(ES-4-1) WiFi 初期化
	(ES-4-2) シリアル設定
	(ES-4-3) シリアル表示
	(ES-4-4) BTペアリング情報
	(ES-4-5) コントローラの接続開始
	(ES-4-5-1) PS4コントローラの接続開始
	(ES-4-5-2) Wiiコントローラの接続開始
	(ES-4-6) UDP通信の開始
	(ES-4-7) DMAバッファを使う設定　これを使うと一度に送受信できるデータ量を増やせる
	(ES-4-8) 送受信バッファをリセット
	(ES-4-9) 初回の送信データを作成してセット
	(ES-4-10) マルチスレッドの宣言（無線系はすべてCORE0で動くとのこと.メインループはCORE1）
	(ES-4-11) SPI通信の設定


------------------------------------------------------------------------------------------------------
----  ESP32関数各種定 ---------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

 ■ Bluetoothペアリング設定用
 ■ Bluetoothペアリングアドレス取得用
 ■ チェックサムの算出関数
 ■ チェックサムの判定関数



====================================================================================================================


------------------------------------------------------------------------------------------------------
---- Teensy4.0の設定関連 -------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

●  [SETTING] 各種設定 (TS-1)
	(TS-1-1) 変更頻度高め
	(TS-1-2) シリアルモニタリング切り替え
	(TS-1-3) マウント有無とピンアサイン
	(TS-1-4) マスターコマンド定義
	(TS-1-5) その他固定値
	[PIN_ASSIGNs] Teensy4.0 ピンアサイン (TS-2-PIN) 
	[HARD] サーボIDとロボット部位、軸との対応表 (TS-3-HARD) 
	[MERIDIM] Meridim配列 一覧表 (TS-4-MERIDIM)
	[LIBRARY] ライブラリ関連 (TS-5-LIB) 

● [VARIABLE] 変数関連 (TS-6-VAL) 
	(TS-6-1) 変数一般
	(TS-6-2) フラグ関連
	(TS-6-3) 共用体の宣言 : Meridim配列格納用、SPI送受信バッファ配列格納用
	(TS-6-4) タイマー管理用の変数
	(TS-6-5) エラーカウント用
	(TS-6-6) 各種モード設定
	(TS-6-7) シリアル経由リモコンの受信用変数
	(TS-6-8) MPU6050のアドレス、レジスタ設定値

	(TS-6-9) サーボ設定関連
		(TS-6-9-1) ICSサーボのインスタンス設定
		(TS-6-9-2) KRSサーボのポジション用配列.degreeではなくサーボ値が入る
		(TS-6-9-3) 各サーボの各サーボのマウント判定用配列
		(TS-6-9-4) 各サーボの内外回転プラマイ方向補正用配列
		(TS-6-9-5-KRS) 各サーボの直立デフォルト値
		(TS-6-9-6) 各サーボのポジション値.中央値を0とした時の増減合計値

● (TS-10) サーボ設定
	(TS-10-1) 各サーボのマウントありなし（1:サーボあり、0:サーボなし）
	(TS-10-2) 各サーボの内外回転プラマイ方向補正(1 or -1)
	(TS-10-3) 各サーボの直立デフォルト値　(KRS値  0deg=7500, +-90deg=7500+-2667  KRS値=deg/0.03375)

● (TS-11) 起動時設定
	(TS-11-1) 入出力ピンのモード設定
	(TS-11-2) シリアル設定
	(TS-11-3) 起動時のインフォメーション表示表示(シリアルモニタ)
	(TS-11-4) サーボ用シリアル設定
	(TS-11-5) I2CのSETUP
	(TS-11-6) ESP32との通信用にSPI_MASTERを開始
	(TS-11-7) SDカードの初期化
	(TS-11-8) 配列のリセット
	(TS-11-9) 割り込み処理系のセット
	(TS-11-10) 変数の設定
	(TS-11-11) 起動時のディレイ用mercちょい足し(サーボ起動待ち用)


------------------------------------------------------------------------------------------------------
----  Teens4.0 関数各種定 ------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

● 計算系の関数各種
	■ チェックサムの算出関数 short checksum_val(short<Meridim配列>, int <配列長>)
	■ チェックサムの判定関数 bool checksum_rslt(short<Meridim配列>, int <配列長>)
	■ degreeをKRS値に変換する関数 int Deg2Krs(float <degree>, int <サーボのニュートラル値 idl_n[i] >) : <degree>にはサーボのポジション増減値idl_d[i] * 回転正逆補正値 idl_pn[i]を入れる. ※左例は左半身系
	■ KRSをdegree値に変換する関数 float Krs2Deg(int <krs値>, float <idl_n[i]>, float <回転正逆補正値 idl_pn[i] >) : ※左例は左半身系
	■ float値を100倍してshortに収めて返す関数 short float2HFshort(<float値>) 限界を超えたら限界値張り付き値を返す.
	■ IMUの初期設定 setupMPU()
	■ IMUのDMP推定値取得 void getYawPitchRoll()　　: 推定方向をmpu_result[12]-[14]に格納.RPYの順 またmpu_read[x]の各値を常時更新.
  	■ IMUの移動平均取得 void imu_moving_average()　: センサの取得周期が高い場合に、移動平均をmpu_result[]に算出する場合.

● コマンド系の関数各種
	■ サーボトリム調整 サーボオンで直立静止 void trimadjustment() 	■ ヨー軸の原点リセット void setyaw() 
	■ 全サーボオフ void servo_all_off() 
	■ JOYPAD処理 void joypad_read() : KRR5FH(KRC-5FH)のボタン入力値を一般化してpad_btnに格納
  

====================================================================================================================
