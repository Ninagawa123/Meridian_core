
Meridian_base フローチャート 2021.12.31

■ Teensy 4.0 flow chart

---- 初期設定 ----
[S-1] ピンアサインを記録
	- 配線対応表(S-1-0)
	- サーボIDとロボット部位、軸との対応表(S-1-1)
	- メリディアン配列の一覧表(S-1-2)

[S-2] ライブラリ導入

[S-3] 各種設定 #DEFINE
	- ピンアサイン(S-3-1)
	- PCモニタリングシリアル速度(0-3-2)
	- 変数準備(S-3-3)
	- センサ準備(S-3-4)
	- サーボ準備(S-3-5)
	- MSG_SIZE　メリディアン配列の設定（デフォルトは90）
	- IMU_FREQ
	- センサ搭載のありなし、種類
	- リモコン搭載のありなし、種類

[S-4] 動作モード切り替え設定
	- PCモニタリングシリアル表示内容切り替え

[S-5] サーボ設定
	- IDに対してマウントのありなし
	- 正逆の方向補正
	- サーボのデフォルト値

---- 関数各種 ----
- trimadjustment() サーボのトリミングでループ
- Deg2Krs(float degree, int id_n) : degreeをKRS値に変換
- Krs2Deg(int krs, float n, float pn) : KRS値をdegreeに変換
- float2HFshort(float val) : floatを100倍してshortに収める関数
- setupMPU() : MPUの初期設定
- getYawPitchRoll() : MPU内のDMP計算結果取得
- setyaw() : MPUのヨー軸原点を現在値にセット
- servo_all_off : 全サーボオフ
 
---- メインループ ----

< 1 > センサー類読み取り
 [1-1] IMUの値を取得

< 2 > コントローラの読み取りおよび動作の設定
 [2-1] コントローラの値を取得

< 3 > Teensy内部で位置制御する場合はここで処理
 [3-1] トップコマンドの判定によりこの行程の実行orスキップを分岐
	・デフォルトはメリディアン配列数である90を読み取る。(3-1-1) 
	・サーボのトリミング。ループ。(3-1-2) 
	・IMUのヨー軸設定(3-1-3) 
 [3-2] 前回のラストに読み込んだサーボ位置をサーボ書き出し用に書き込む
 [3-3] センサーデータによる動作へのフィードバック
 [3-4] 移動時間の決定
 [3-5] Teensy内計算による次回動作をMeridim配列に書き込む

< 4 > サーボコマンドの書き込み
 [4-1] メリディアン配列をサーボ命令に書き換え
 [4-2] サーボコマンドの配列に書き込み
 [4-3] サーボデータのICS送信および返り値を取得 

< 5 > 送信用のメリディアン配列を作成する
 [5-1] トップコマンドを配列格納
 [5-2] 移動時間を配列格納
 [5-3] センサー値を配列格納
 [5-4] サーボIDごとにの現在位置もしくはTeensy内計算結果を配列にいれる
 [5-5] カスタムデータを配列格納
 [5-6] チェックサムを計算して代入
 [5-7] 送信データのSPIバッファへのバイト型書き込み

< 6 > ESP32とのISPによる送受信処理
 [6-1] シリアルモニタ表示（送信データ）
 [6-2] ESP32へのSPI送受・受信の実行
 [6-3] ESP32からのSPI受信データチェックサム確認と成否のシリアル表示
 [6-3] ESP32からのSPI受信データエラー率のシリアル表示
 [6-4] ESP32からのSPI受信データデータのシリアルモニタ表示

< 7 > フレーム終端処理
 [7-1] この時点で１フレーム内に処理が収まっていない時の処理、LED点灯
 [7-2] この時点で時間が余っていたら時間消化。時間がオーバーしていたらこの処理を自然と飛ばす。
 [7-3] フレーム管理時計mercのカウントアップ



■ ESP32 flow chart

---- 初期設定 ----
[E-1] ピンアサインを記録
	- 配線対応表(E-1-0)
	- メリディアン配列の一覧表(S-1-2)

[E-2] ライブラリ導入

[E-3] 各種設定 #DEFINE
	- Wifi アクセスポイントのSSDI
	- Wifi アクセスポイントのパスワード
	- Wifi 送信先（PC）のIPアドレス

[S-4] 動作モード切り替え設定
	- PCモニタリングシリアル表示内容切り替え

[S-5] サーボ設定
	- IDに対してマウントのありなし
	- 正逆の方向補正
	- サーボのデフォルト値

---- 関数各種 ----
- receiveUDP() 受信用の関数 パケットが来ていれば、r_ufdata配列に保存
- sendUDP() 送信用の関数
 
---- メインループ ----

< 1 > U D P 受 信
 [1-1] UDP受信の実行 もしデータパケットが来ていれば受信する
 [1-2] UDP受信配列からSPI送信配列にデータを転写

< 2 > S P I 送 受 信
 [2-1] SPI送受信を同時に行う
 [2-2] SPI受信データバッファを別のバッファ配列に転写
  
< 3 > U D P 送 信
 [3-1] UDP送信を実行

